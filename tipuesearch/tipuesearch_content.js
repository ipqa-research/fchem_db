var tipuesearch = {"pages":[{"title":" forsus ","text":"forsus forsus The basics forsus Pure chemical compounds database and general API. forsus provides a simple API to read json files containing pure component\ninformation and later on use it inside other projects. The basics Using forsus in your Fortran project is relatively simple: All the readable parameters are kept on a Substance object, from which\nthey can be later on extracted. It keeps a global variable forsus_dir with should be the path of your database\nfile directory. data/json is the directory that the library uses by\ndefault. program main use forsus type ( Substance ) :: s ! This will use the default path s = Substance ( \"1-butanol\" ) ! This will use the defined path forsus_dir = \"my/json/files\" s = Substance ( \"1-butanol\" ) ! It is also possible to use a custom path sus = Substance ( \"1-butanol\" , path = \"the/json/is/here\" ) ! Show the critical temperature print * , sus % critical % critical_temperature % value end program Developer Info jscilipoti PhD in Chemical Engineering","tags":"home","loc":"index.html"},{"title":"ScalarProperty – forsus ","text":"type, public, extends( Property ) :: ScalarProperty Scalar property. A property with a single scalar value, like a critical constant. Inherits type~~scalarproperty~~InheritsGraph type~scalarproperty ScalarProperty type~property Property type~scalarproperty->type~property Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~scalarproperty~~InheritedByGraph type~scalarproperty ScalarProperty type~criticalconstants CriticalConstants type~criticalconstants->type~scalarproperty critical_pressure, critical_temperature, critical_volume, acentric_factor type~substance Substance type~substance->type~scalarproperty parachor, mathiascopeman type~substance->type~criticalconstants critical Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units real(kind=pr), public :: value Property value Type-Bound Procedures procedure, public :: from_json => scalar_from_json public impure elemental subroutine scalar_from_json (self, name, json_str, path) Setup a scalar property from a provided json key and json file path. Arguments Type Intent Optional Attributes Name class( ScalarProperty ), intent(inout) :: self character(len=*), intent(in) :: name Property name. Should be the key in the json file. character(len=*), intent(in) :: json_str json file relative path to executable. character(len=*), intent(in), optional :: path json file relative path to executable.","tags":"","loc":"type/scalarproperty.html"},{"title":"Property – forsus ","text":"type, public :: Property Property base type Define the basics that a property can have. Inherited by type~~property~~InheritedByGraph type~property Property type~scalarproperty ScalarProperty type~scalarproperty->type~property type~criticalconstants CriticalConstants type~criticalconstants->type~scalarproperty critical_pressure, critical_temperature, critical_volume, acentric_factor type~substance Substance type~substance->type~scalarproperty parachor, mathiascopeman type~substance->type~criticalconstants critical Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units Type-Bound Procedures procedure( abs_from_json ), public, deferred :: from_json impure elemental subroutine abs_from_json(self, name, json_str, path) Prototype How a Property reader routine is espected to work. A Property should be setted up by providing it’s name and a json file relative (or absolute) path. The Property instance\nname should be setted up inside the subroutine and later on\nthe Property value(s) should be read from the json file. Inside the subroutine the default forsus_dir path should be used\nbut it should also be possible to use an optional custom path. An example implementation can be seen at [scalar_from_json(subroutine)] Arguments Type Intent Optional Attributes Name class( Property ), intent(inout) :: self Property character(len=*), intent(in) :: name Property’s name ( json key) character(len=*), intent(in) :: json_str json file path character(len=*), intent(in), optional :: path Optional database path","tags":"","loc":"type/property.html"},{"title":"Substance – forsus ","text":"type, public :: Substance Substance object. A Substance object holds all the defined properties available in the\npackage. It can be initialized either by hand or from a json file.\nTo initialize from a json file the user must provide a database\npath by setting up the variable forsus_dir . Then defining a \nSubstance by it’s name (which should be the same as the filename)\nwill find all the properties and set them up properly. When using a custom datafile it is very possible that the information\nin it is limited in comparison of what the original API provides.\nIn this case you it is possible to extract only the desired parameters\nwith the only argument. Strings for using only are: “critical”: Critical constants , , Examples Default behaviour use forsus , only : Substance , forsus_dir type ( Substance ) :: sus ! Set the path of the json files forsus_dir = \"some/directory/path\" ! Define your substance sus = Substance ( \"1-butanol\" ) Using a custom path for a single substance use forsus , only : Substance sus = Substance ( \"1-butanol\" , path = \"the/json/is/here/\" ) Extracting limited information use forsus , only : Substance character ( len = 50 ) :: only_these ( 3 ) ! Only extract the critical constants sus = Substance ( \"1-butanol\" , only = [ \"critical\" ]) ! Extracting a list of properties only_these ( 1 ) = \"critical\" only_these ( 2 ) = \"unifac\" only_these ( 3 ) = \"mathiascopeman\" sus = Substance ( \"1-butanol\" , only = only_these ) Inherits type~~substance~~InheritsGraph type~substance Substance type~criticalconstants CriticalConstants type~substance->type~criticalconstants critical type~scalarproperty ScalarProperty type~substance->type~scalarproperty parachor, mathiascopeman type~criticalconstants->type~scalarproperty critical_pressure, critical_temperature, critical_volume, acentric_factor type~property Property type~scalarproperty->type~property Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial type( CriticalConstants ), public :: critical Critical constants type( ScalarProperty ), public :: mathiascopeman (3) Mathias Copeman function parameters character(len=:), public, allocatable :: name Substance name type( ScalarProperty ), public :: parachor Parachor Constructor public        interface Substance public  function init_json (name, path, only) Initialize a Substance object from a json file, provided it’s name.\nIt is also optional to use a custom path for the component. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name Component’s name character(len=*), intent(in), optional :: path Optional database path character(len=*), intent(in), optional :: only (:) Only extract this parameters, the options are: Read more… Return Value type( Substance )","tags":"","loc":"type/substance.html"},{"title":"CriticalConstants – forsus ","text":"type, public :: CriticalConstants Critical constants Inherits type~~criticalconstants~~InheritsGraph type~criticalconstants CriticalConstants type~scalarproperty ScalarProperty type~criticalconstants->type~scalarproperty critical_pressure, critical_temperature, critical_volume, acentric_factor type~property Property type~scalarproperty->type~property Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~criticalconstants~~InheritedByGraph type~criticalconstants CriticalConstants type~substance Substance type~substance->type~criticalconstants critical Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial type( ScalarProperty ), public :: acentric_factor Acentric Factor [adim] type( ScalarProperty ), public :: critical_pressure Critical Pressure [Pa] type( ScalarProperty ), public :: critical_temperature Critical Temperature [K] type( ScalarProperty ), public :: critical_volume Critical Volume [m3/kmol == L/mol] Type-Bound Procedures procedure, public :: from_json public impure elemental subroutine from_json (self, json_str, path) Read all the critical properties from a json file. Arguments Type Intent Optional Attributes Name class( CriticalConstants ), intent(inout) :: self character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"type/criticalconstants.html"},{"title":"abs_from_json – forsus","text":"interface public impure elemental subroutine abs_from_json(self, name, json_str, path) Arguments Type Intent Optional Attributes Name class( Property ), intent(inout) :: self Property character(len=*), intent(in) :: name Property’s name ( json key) character(len=*), intent(in) :: json_str json file path character(len=*), intent(in), optional :: path Optional database path Description How a Property reader routine is espected to work. A Property should be setted up by providing it’s name and a json file relative (or absolute) path. The Property instance\nname should be setted up inside the subroutine and later on\nthe Property value(s) should be read from the json file. Inside the subroutine the default forsus_dir path should be used\nbut it should also be possible to use an optional custom path. An example implementation can be seen at [scalar_from_json(subroutine)]","tags":"","loc":"interface/abs_from_json.html"},{"title":"scalar_from_json – forsus","text":"public impure elemental subroutine scalar_from_json(self, name, json_str, path) Uses iso_fortran_env proc~~scalar_from_json~~UsesGraph proc~scalar_from_json forsus_properties_scalar::ScalarProperty%scalar_from_json iso_fortran_env iso_fortran_env proc~scalar_from_json->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Setup a scalar property from a provided json key and json file path. Type Bound ScalarProperty Arguments Type Intent Optional Attributes Name class( ScalarProperty ), intent(inout) :: self character(len=*), intent(in) :: name Property name. Should be the key in the json file. character(len=*), intent(in) :: json_str json file relative path to executable. character(len=*), intent(in), optional :: path json file relative path to executable. Calls proc~~scalar_from_json~~CallsGraph proc~scalar_from_json forsus_properties_scalar::ScalarProperty%scalar_from_json failed failed proc~scalar_from_json->failed get get proc~scalar_from_json->get initialize initialize proc~scalar_from_json->initialize load_file load_file proc~scalar_from_json->load_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~scalar_from_json~~CalledByGraph proc~scalar_from_json forsus_properties_scalar::ScalarProperty%scalar_from_json proc~from_json forsus_properties_critical_constants::CriticalConstants%from_json proc~from_json->proc~scalar_from_json proc~init_json forsus_substance::init_json proc~init_json->proc~scalar_from_json interface~substance forsus_substance::Substance interface~substance->proc~init_json Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type(json_file), public :: json","tags":"","loc":"proc/scalar_from_json.html"},{"title":"init_json – forsus","text":"public  function init_json(name, path, only) Initialize a Substance object from a json file, provided it’s name.\nIt is also optional to use a custom path for the component. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name Component’s name character(len=*), intent(in), optional :: path Optional database path character(len=*), intent(in), optional :: only (:) Only extract this parameters, the options are: “critical”: Tc, Pc and Acentric Factor Return Value type( Substance ) Calls proc~~init_json~~CallsGraph proc~init_json forsus_substance::init_json proc~scalar_from_json forsus_properties_scalar::ScalarProperty%scalar_from_json proc~init_json->proc~scalar_from_json failed failed proc~scalar_from_json->failed get get proc~scalar_from_json->get initialize initialize proc~scalar_from_json->initialize load_file load_file proc~scalar_from_json->load_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~init_json~~CalledByGraph proc~init_json forsus_substance::init_json interface~substance forsus_substance::Substance interface~substance->proc~init_json Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial integer, public :: i","tags":"","loc":"proc/init_json.html"},{"title":"Substance – forsus","text":"public interface Substance Calls interface~~substance~~CallsGraph interface~substance forsus_substance::Substance proc~init_json forsus_substance::init_json interface~substance->proc~init_json proc~scalar_from_json forsus_properties_scalar::ScalarProperty%scalar_from_json proc~init_json->proc~scalar_from_json failed failed proc~scalar_from_json->failed get get proc~scalar_from_json->get initialize initialize proc~scalar_from_json->initialize load_file load_file proc~scalar_from_json->load_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures public  function init_json (name, path, only) Initialize a Substance object from a json file, provided it’s name.\nIt is also optional to use a custom path for the component. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name Component’s name character(len=*), intent(in), optional :: path Optional database path character(len=*), intent(in), optional :: only (:) Only extract this parameters, the options are: Read more… Return Value type( Substance )","tags":"","loc":"interface/substance.html"},{"title":"from_json – forsus","text":"public impure elemental subroutine from_json(self, json_str, path) Read all the critical properties from a json file. Type Bound CriticalConstants Arguments Type Intent Optional Attributes Name class( CriticalConstants ), intent(inout) :: self character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path Calls proc~~from_json~~CallsGraph proc~from_json forsus_properties_critical_constants::CriticalConstants%from_json proc~scalar_from_json forsus_properties_scalar::ScalarProperty%scalar_from_json proc~from_json->proc~scalar_from_json failed failed proc~scalar_from_json->failed get get proc~scalar_from_json->get initialize initialize proc~scalar_from_json->initialize load_file load_file proc~scalar_from_json->load_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/from_json.html"},{"title":"forsus_properties_scalar – forsus","text":"Uses forsus_properties_base forsus_constants json_module module~~forsus_properties_scalar~~UsesGraph module~forsus_properties_scalar forsus_properties_scalar json_module json_module module~forsus_properties_scalar->json_module module~forsus_constants forsus_constants module~forsus_properties_scalar->module~forsus_constants module~forsus_properties_base forsus_properties_base module~forsus_properties_scalar->module~forsus_properties_base iso_fortran_env iso_fortran_env module~forsus_constants->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~forsus_properties_scalar~~UsedByGraph module~forsus_properties_scalar forsus_properties_scalar module~forsus_properties forsus_properties module~forsus_properties->module~forsus_properties_scalar module~forsus_properties_critical_constants forsus_properties_critical_constants module~forsus_properties->module~forsus_properties_critical_constants module~forsus_properties_critical_constants->module~forsus_properties_scalar module~forsus forsus module~forsus->module~forsus_properties module~forsus_substance forsus_substance module~forsus->module~forsus_substance module~forsus_substance->module~forsus_properties Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Derived Types type, public, extends( Property ) :: ScalarProperty Scalar property. Read more… Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units real(kind=pr), public :: value Property value Type-Bound Procedures procedure, public :: from_json => scalar_from_json Subroutines public impure elemental subroutine scalar_from_json (self, name, json_str, path) Setup a scalar property from a provided json key and json file path. Arguments Type Intent Optional Attributes Name class( ScalarProperty ), intent(inout) :: self character(len=*), intent(in) :: name Property name. Should be the key in the json file. character(len=*), intent(in) :: json_str json file relative path to executable. character(len=*), intent(in), optional :: path json file relative path to executable.","tags":"","loc":"module/forsus_properties_scalar.html"},{"title":"forsus – forsus","text":"ForSus: Fortran substance properties. Uses forsus_constants forsus_properties forsus_substance module~~forsus~~UsesGraph module~forsus forsus module~forsus_constants forsus_constants module~forsus->module~forsus_constants module~forsus_properties forsus_properties module~forsus->module~forsus_properties module~forsus_substance forsus_substance module~forsus->module~forsus_substance iso_fortran_env iso_fortran_env module~forsus_constants->iso_fortran_env module~forsus_properties_critical_constants forsus_properties_critical_constants module~forsus_properties->module~forsus_properties_critical_constants module~forsus_properties_scalar forsus_properties_scalar module~forsus_properties->module~forsus_properties_scalar module~forsus_substance->module~forsus_properties module~forsus_properties_critical_constants->module~forsus_properties_scalar module~forsus_properties_scalar->module~forsus_constants json_module json_module module~forsus_properties_scalar->json_module module~forsus_properties_base forsus_properties_base module~forsus_properties_scalar->module~forsus_properties_base Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: version = \"0.1.0\"","tags":"","loc":"module/forsus.html"},{"title":"forsus_properties_base – forsus","text":"Basic definition of a Property Used by module~~forsus_properties_base~~UsedByGraph module~forsus_properties_base forsus_properties_base module~forsus_properties_scalar forsus_properties_scalar module~forsus_properties_scalar->module~forsus_properties_base module~forsus_properties forsus_properties module~forsus_properties->module~forsus_properties_scalar module~forsus_properties_critical_constants forsus_properties_critical_constants module~forsus_properties->module~forsus_properties_critical_constants module~forsus_properties_critical_constants->module~forsus_properties_scalar module~forsus forsus module~forsus->module~forsus_properties module~forsus_substance forsus_substance module~forsus->module~forsus_substance module~forsus_substance->module~forsus_properties Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Abstract Interfaces abstract interface public impure elemental subroutine abs_from_json(self, name, json_str, path) How a Property reader routine is espected to work. A Property should be setted up by providing it’s name and a json file relative (or absolute) path. The Property instance\nname should be setted up inside the subroutine and later on\nthe Property value(s) should be read from the json file. Inside the subroutine the default forsus_dir path should be used\nbut it should also be possible to use an optional custom path. An example implementation can be seen at [scalar_from_json(subroutine)] Arguments Type Intent Optional Attributes Name class( Property ), intent(inout) :: self Property character(len=*), intent(in) :: name Property’s name ( json key) character(len=*), intent(in) :: json_str json file path character(len=*), intent(in), optional :: path Optional database path Derived Types type, public :: Property Property base type Read more… Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units Type-Bound Procedures procedure( abs_from_json ), public, deferred :: from_json","tags":"","loc":"module/forsus_properties_base.html"},{"title":"forsus_substance – forsus","text":"Uses forsus_properties module~~forsus_substance~~UsesGraph module~forsus_substance forsus_substance module~forsus_properties forsus_properties module~forsus_substance->module~forsus_properties module~forsus_properties_critical_constants forsus_properties_critical_constants module~forsus_properties->module~forsus_properties_critical_constants module~forsus_properties_scalar forsus_properties_scalar module~forsus_properties->module~forsus_properties_scalar module~forsus_properties_critical_constants->module~forsus_properties_scalar json_module json_module module~forsus_properties_scalar->json_module module~forsus_constants forsus_constants module~forsus_properties_scalar->module~forsus_constants module~forsus_properties_base forsus_properties_base module~forsus_properties_scalar->module~forsus_properties_base iso_fortran_env iso_fortran_env module~forsus_constants->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~forsus_substance~~UsedByGraph module~forsus_substance forsus_substance module~forsus forsus module~forsus->module~forsus_substance Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Interfaces public        interface Substance public  function init_json (name, path, only) Initialize a Substance object from a json file, provided it’s name.\nIt is also optional to use a custom path for the component. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name Component’s name character(len=*), intent(in), optional :: path Optional database path character(len=*), intent(in), optional :: only (:) Only extract this parameters, the options are: Read more… Return Value type( Substance ) Derived Types type, public :: Substance Substance object. Read more… Components Type Visibility Attributes Name Initial type( CriticalConstants ), public :: critical Critical constants type( ScalarProperty ), public :: mathiascopeman (3) Mathias Copeman function parameters character(len=:), public, allocatable :: name Substance name type( ScalarProperty ), public :: parachor Parachor Constructor public\n\n                    \n                    function init_json (name, path, only) Initialize a Substance object from a json file, provided it’s name.\nIt is also optional to use a custom path for the component. Functions public  function init_json (name, path, only) Initialize a Substance object from a json file, provided it’s name.\nIt is also optional to use a custom path for the component. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name Component’s name character(len=*), intent(in), optional :: path Optional database path character(len=*), intent(in), optional :: only (:) Only extract this parameters, the options are: Read more… Return Value type( Substance )","tags":"","loc":"module/forsus_substance.html"},{"title":"forsus_properties_critical_constants – forsus","text":"Uses forsus_properties_scalar module~~forsus_properties_critical_constants~~UsesGraph module~forsus_properties_critical_constants forsus_properties_critical_constants module~forsus_properties_scalar forsus_properties_scalar module~forsus_properties_critical_constants->module~forsus_properties_scalar json_module json_module module~forsus_properties_scalar->json_module module~forsus_constants forsus_constants module~forsus_properties_scalar->module~forsus_constants module~forsus_properties_base forsus_properties_base module~forsus_properties_scalar->module~forsus_properties_base iso_fortran_env iso_fortran_env module~forsus_constants->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~forsus_properties_critical_constants~~UsedByGraph module~forsus_properties_critical_constants forsus_properties_critical_constants module~forsus_properties forsus_properties module~forsus_properties->module~forsus_properties_critical_constants module~forsus forsus module~forsus->module~forsus_properties module~forsus_substance forsus_substance module~forsus->module~forsus_substance module~forsus_substance->module~forsus_properties Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Derived Types type, public :: CriticalConstants Critical constants Components Type Visibility Attributes Name Initial type( ScalarProperty ), public :: acentric_factor Acentric Factor [adim] type( ScalarProperty ), public :: critical_pressure Critical Pressure [Pa] type( ScalarProperty ), public :: critical_temperature Critical Temperature [K] type( ScalarProperty ), public :: critical_volume Critical Volume [m3/kmol == L/mol] Type-Bound Procedures procedure, public :: from_json Subroutines public impure elemental subroutine from_json (self, json_str, path) Read all the critical properties from a json file. Arguments Type Intent Optional Attributes Name class( CriticalConstants ), intent(inout) :: self character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"module/forsus_properties_critical_constants.html"},{"title":"forsus_constants – forsus","text":"Package’s constants. Uses iso_fortran_env module~~forsus_constants~~UsesGraph module~forsus_constants forsus_constants iso_fortran_env iso_fortran_env module~forsus_constants->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~forsus_constants~~UsedByGraph module~forsus_constants forsus_constants module~forsus forsus module~forsus->module~forsus_constants module~forsus_properties forsus_properties module~forsus->module~forsus_properties module~forsus_substance forsus_substance module~forsus->module~forsus_substance module~forsus_properties_scalar forsus_properties_scalar module~forsus_properties_scalar->module~forsus_constants module~forsus_properties->module~forsus_properties_scalar module~forsus_properties_critical_constants forsus_properties_critical_constants module~forsus_properties->module~forsus_properties_critical_constants module~forsus_properties_critical_constants->module~forsus_properties_scalar module~forsus_substance->module~forsus_properties Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: forsus_default_dir = \"data/json\" Default database directory. Right now only works for development\nmode character(len=:), public, allocatable :: forsus_dir Custom database directory integer, public, parameter :: pr = real64 Real precision (double)","tags":"","loc":"module/forsus_constants.html"},{"title":"forsus_properties – forsus","text":"Possible properties defined in the package. Uses forsus_properties_scalar forsus_properties_critical_constants module~~forsus_properties~~UsesGraph module~forsus_properties forsus_properties module~forsus_properties_critical_constants forsus_properties_critical_constants module~forsus_properties->module~forsus_properties_critical_constants module~forsus_properties_scalar forsus_properties_scalar module~forsus_properties->module~forsus_properties_scalar module~forsus_properties_critical_constants->module~forsus_properties_scalar json_module json_module module~forsus_properties_scalar->json_module module~forsus_constants forsus_constants module~forsus_properties_scalar->module~forsus_constants module~forsus_properties_base forsus_properties_base module~forsus_properties_scalar->module~forsus_properties_base iso_fortran_env iso_fortran_env module~forsus_constants->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~forsus_properties~~UsedByGraph module~forsus_properties forsus_properties module~forsus forsus module~forsus->module~forsus_properties module~forsus_substance forsus_substance module~forsus->module~forsus_substance module~forsus_substance->module~forsus_properties Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses.","tags":"","loc":"module/forsus_properties.html"},{"title":"scalar_property.f90 – forsus","text":"This file depends on sourcefile~~scalar_property.f90~~EfferentGraph sourcefile~scalar_property.f90 scalar_property.f90 sourcefile~base.f90 base.f90 sourcefile~scalar_property.f90->sourcefile~base.f90 sourcefile~constants.f90 constants.f90 sourcefile~scalar_property.f90->sourcefile~constants.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~scalar_property.f90~~AfferentGraph sourcefile~scalar_property.f90 scalar_property.f90 sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~critical_constants.f90->sourcefile~scalar_property.f90 sourcefile~properties.f90 properties.f90 sourcefile~properties.f90->sourcefile~scalar_property.f90 sourcefile~properties.f90->sourcefile~critical_constants.f90 sourcefile~forsus.f90 forsus.f90 sourcefile~forsus.f90->sourcefile~properties.f90 sourcefile~substance.f90 substance.f90 sourcefile~forsus.f90->sourcefile~substance.f90 sourcefile~substance.f90->sourcefile~properties.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus_properties_scalar use forsus_constants , only : pr , forsus_default_dir , forsus_dir use forsus_properties_base , only : Property use json_module , only : json_file implicit none type , extends ( Property ) :: ScalarProperty !! Scalar property. !! !! A property with a single scalar value, like a critical constant. real ( pr ) :: value !! Property value contains procedure :: from_json => scalar_from_json end type ScalarProperty contains impure elemental subroutine scalar_from_json ( self , name , json_str , path ) !! Setup a scalar property from a provided json key and json file path. use iso_fortran_env , only : error_unit class ( ScalarProperty ), intent ( in out ) :: self character ( len =* ), intent ( in ) :: name !! Property name. Should be the key in the `json` file. character ( len =* ), intent ( in ) :: json_str !! `json` file relative path to executable. character ( len =* ), optional , intent ( in ) :: path !! `json` file relative path to executable. type ( json_file ) :: json self % name = name call json % initialize () if ( present ( path )) then call json % load_file ( path // \"/\" // json_str ) else if ( allocated ( forsus_dir )) then call json % load_file ( forsus_dir // \"/\" // json_str ) else call json % load_file ( forsus_default_dir // \"/\" // json_str ) end if end if if ( json % failed ()) then write ( error_unit , * ) \"ERROR: Invalid .json file: \" , json_str call exit ( 1 ) end if call json % get ( self % name // \".value(1)\" , self % value ) call json % get ( self % name // \".units\" , self % units ) end subroutine scalar_from_json end module forsus_properties_scalar","tags":"","loc":"sourcefile/scalar_property.f90.html"},{"title":"forsus.f90 – forsus","text":"This file depends on sourcefile~~forsus.f90~~EfferentGraph sourcefile~forsus.f90 forsus.f90 sourcefile~constants.f90 constants.f90 sourcefile~forsus.f90->sourcefile~constants.f90 sourcefile~properties.f90 properties.f90 sourcefile~forsus.f90->sourcefile~properties.f90 sourcefile~substance.f90 substance.f90 sourcefile~forsus.f90->sourcefile~substance.f90 sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~properties.f90->sourcefile~critical_constants.f90 sourcefile~scalar_property.f90 scalar_property.f90 sourcefile~properties.f90->sourcefile~scalar_property.f90 sourcefile~substance.f90->sourcefile~properties.f90 sourcefile~critical_constants.f90->sourcefile~scalar_property.f90 sourcefile~scalar_property.f90->sourcefile~constants.f90 sourcefile~base.f90 base.f90 sourcefile~scalar_property.f90->sourcefile~base.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus !! ForSus: Fortran substance properties. use forsus_constants use forsus_properties use forsus_substance character ( len =* ), parameter :: version = \"0.1.0\" end module","tags":"","loc":"sourcefile/forsus.f90.html"},{"title":"base.f90 – forsus","text":"Files dependent on this one sourcefile~~base.f90~~AfferentGraph sourcefile~base.f90 base.f90 sourcefile~scalar_property.f90 scalar_property.f90 sourcefile~scalar_property.f90->sourcefile~base.f90 sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~critical_constants.f90->sourcefile~scalar_property.f90 sourcefile~properties.f90 properties.f90 sourcefile~properties.f90->sourcefile~scalar_property.f90 sourcefile~properties.f90->sourcefile~critical_constants.f90 sourcefile~forsus.f90 forsus.f90 sourcefile~forsus.f90->sourcefile~properties.f90 sourcefile~substance.f90 substance.f90 sourcefile~forsus.f90->sourcefile~substance.f90 sourcefile~substance.f90->sourcefile~properties.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus_properties_base !! Basic definition of a Property implicit none type , abstract :: Property !! Property base type !! !! Define the basics that a property can have. character ( len = :), allocatable :: name !! Property's name character ( len = :), allocatable :: units !! Units contains procedure ( abs_from_json ), deferred :: from_json end type abstract interface impure elemental subroutine abs_from_json ( self , name , json_str , path ) !! How a Property reader routine is espected to work. !! !! A Property should be setted up by providing it's name and a !! `json` file relative (or absolute) path. The Property instance !! name should be setted up inside the subroutine and later on !! the Property value(s) should be read from the `json` file. !! !! Inside the subroutine the default `forsus_dir` path should be used !! but it should also be possible to use an optional custom path. !! !! An example implementation can be seen at [scalar_from_json(subroutine)] import Property class ( Property ), intent ( in out ) :: self !! Property character ( len =* ), intent ( in ) :: name !! Property's name (`json` key) character ( len =* ), intent ( in ) :: json_str !! `json` file path character ( len =* ), optional , intent ( in ) :: path !! Optional database path end subroutine end interface end module","tags":"","loc":"sourcefile/base.f90.html"},{"title":"substance.f90 – forsus","text":"This file depends on sourcefile~~substance.f90~~EfferentGraph sourcefile~substance.f90 substance.f90 sourcefile~properties.f90 properties.f90 sourcefile~substance.f90->sourcefile~properties.f90 sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~properties.f90->sourcefile~critical_constants.f90 sourcefile~scalar_property.f90 scalar_property.f90 sourcefile~properties.f90->sourcefile~scalar_property.f90 sourcefile~critical_constants.f90->sourcefile~scalar_property.f90 sourcefile~base.f90 base.f90 sourcefile~scalar_property.f90->sourcefile~base.f90 sourcefile~constants.f90 constants.f90 sourcefile~scalar_property.f90->sourcefile~constants.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~substance.f90~~AfferentGraph sourcefile~substance.f90 substance.f90 sourcefile~forsus.f90 forsus.f90 sourcefile~forsus.f90->sourcefile~substance.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus_substance use forsus_properties , only : ScalarProperty , CriticalConstants implicit none type :: Substance !! Substance object. !! !! A Substance object holds all the defined properties available in the !! package. It can be initialized either by hand or from a json file. !! To initialize from a `json` file the user must provide a database !! path by setting up the variable `forsus_dir`. Then defining a !! Substance by it's name (which should be the same as the filename) !! will find all the properties and set them up properly. !! !! When using a custom datafile it is very possible that the information !! in it is limited in comparison of what the original API provides. !! In this case you it is possible to extract only the desired parameters !! with the `only` argument. !! !! Strings for using `only` are: !! !! - \"critical\": Critical constants P_c, T_c, \\omega !! !! ## Examples !! !! ### Default behaviour !! ```fortran !! use forsus, only: Substance, forsus_dir !! type(Substance) :: sus !! !! ! Set the path of the json files !! forsus_dir = \"some/directory/path\" !! !! ! Define your substance !! sus = Substance(\"1-butanol\") !! ``` !! !! ### Using a custom path for a single substance !! !! ```fortran !! use forsus, only: Substance !! sus = Substance(\"1-butanol\", path=\"the/json/is/here/\") !! ``` !! !! ### Extracting limited information !! !! ```fortran !! use forsus, only: Substance !! character(len=50) :: only_these(3) !! !! ! Only extract the critical constants !! sus = Substance(\"1-butanol\", only=[\"critical\"]) !! !! ! Extracting a list of properties !! only_these(1) = \"critical\" !! only_these(2) = \"unifac\" !! only_these(3) = \"mathiascopeman\" !! sus = Substance(\"1-butanol\", only=only_these) !! ``` character ( len = :), allocatable :: name !! Substance name type ( CriticalConstants ) :: critical !! Critical constants type ( ScalarProperty ) :: parachor !! Parachor type ( ScalarProperty ) :: mathiascopeman ( 3 ) !! Mathias Copeman \\alpha function parameters end type ! Setting this interface allows to use `init_json` as the object init interface Substance module procedure :: init_json end interface contains type ( Substance ) function init_json ( name , path , only ) !! Initialize a Substance object from a json file, provided it's name. !! It is also optional to use a custom path for the component. character ( len =* ), intent ( in ) :: name !! Component's name character ( len =* ), optional , intent ( in ) :: path !! Optional database path character ( len =* ), optional , intent ( in ) :: only (:) !! Only extract this parameters, the options are: !! !! - \"critical\": Tc, Pc and Acentric Factor integer :: i init_json % name = trim ( name ) if (. not . present ( only )) then call init_json % parachor % from_json ( \"Parachor\" , init_json % name // \".json\" , path ) call init_json % mathiascopeman ( 1 )% from_json ( \"MatthiasCopemanC1\" , init_json % name // \".json\" , path ) call init_json % mathiascopeman ( 2 )% from_json ( \"MatthiasCopemanC2\" , init_json % name // \".json\" , path ) call init_json % mathiascopeman ( 3 )% from_json ( \"MatthiasCopemanC3\" , init_json % name // \".json\" , path ) call init_json % critical % from_json ( init_json % name // \".json\" , path ) else do i = 1 , size ( only ) select case ( only ( i )) case ( \"critical\" ) call init_json % critical % from_json ( init_json % name // \".json\" , path ) end select end do end if end function end module","tags":"","loc":"sourcefile/substance.f90.html"},{"title":"critical_constants.f90 – forsus","text":"This file depends on sourcefile~~critical_constants.f90~~EfferentGraph sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~scalar_property.f90 scalar_property.f90 sourcefile~critical_constants.f90->sourcefile~scalar_property.f90 sourcefile~base.f90 base.f90 sourcefile~scalar_property.f90->sourcefile~base.f90 sourcefile~constants.f90 constants.f90 sourcefile~scalar_property.f90->sourcefile~constants.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~critical_constants.f90~~AfferentGraph sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~properties.f90 properties.f90 sourcefile~properties.f90->sourcefile~critical_constants.f90 sourcefile~forsus.f90 forsus.f90 sourcefile~forsus.f90->sourcefile~properties.f90 sourcefile~substance.f90 substance.f90 sourcefile~forsus.f90->sourcefile~substance.f90 sourcefile~substance.f90->sourcefile~properties.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus_properties_critical_constants use forsus_properties_scalar , only : ScalarProperty implicit none type :: CriticalConstants !! Critical constants type ( ScalarProperty ) :: critical_pressure !! Critical Pressure [Pa] type ( ScalarProperty ) :: critical_temperature !! Critical Temperature [K] type ( ScalarProperty ) :: critical_volume !! Critical Volume [m3/kmol == L/mol] type ( ScalarProperty ) :: acentric_factor !! Acentric Factor [adim] contains procedure :: from_json end type contains impure elemental subroutine from_json ( self , json_str , path ) !! Read all the critical properties from a `json` file. class ( CriticalConstants ), intent ( in out ) :: self character ( len =* ), intent ( in ) :: json_str character ( len =* ), optional , intent ( in ) :: path call self % critical_pressure % from_json ( \"CriticalPressure\" , json_str , path ) call self % critical_temperature % from_json ( \"CriticalTemperature\" , json_str , path ) call self % critical_volume % from_json ( \"CriticalVolume\" , json_str , path ) call self % acentric_factor % from_json ( \"AcentricityFactor\" , json_str , path ) end subroutine end module","tags":"","loc":"sourcefile/critical_constants.f90.html"},{"title":"constants.f90 – forsus","text":"Files dependent on this one sourcefile~~constants.f90~~AfferentGraph sourcefile~constants.f90 constants.f90 sourcefile~forsus.f90 forsus.f90 sourcefile~forsus.f90->sourcefile~constants.f90 sourcefile~properties.f90 properties.f90 sourcefile~forsus.f90->sourcefile~properties.f90 sourcefile~substance.f90 substance.f90 sourcefile~forsus.f90->sourcefile~substance.f90 sourcefile~scalar_property.f90 scalar_property.f90 sourcefile~scalar_property.f90->sourcefile~constants.f90 sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~critical_constants.f90->sourcefile~scalar_property.f90 sourcefile~properties.f90->sourcefile~scalar_property.f90 sourcefile~properties.f90->sourcefile~critical_constants.f90 sourcefile~substance.f90->sourcefile~properties.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus_constants !! Package's constants. use iso_fortran_env , only : real64 implicit none integer , parameter :: pr = real64 !! Real precision (double) character ( len = :), allocatable :: forsus_dir !! Custom database directory character ( len =* ), parameter :: forsus_default_dir = \"data/json\" !! Default database directory. Right now only works for development !! mode end module","tags":"","loc":"sourcefile/constants.f90.html"},{"title":"properties.f90 – forsus","text":"This file depends on sourcefile~~properties.f90~~EfferentGraph sourcefile~properties.f90 properties.f90 sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~properties.f90->sourcefile~critical_constants.f90 sourcefile~scalar_property.f90 scalar_property.f90 sourcefile~properties.f90->sourcefile~scalar_property.f90 sourcefile~critical_constants.f90->sourcefile~scalar_property.f90 sourcefile~base.f90 base.f90 sourcefile~scalar_property.f90->sourcefile~base.f90 sourcefile~constants.f90 constants.f90 sourcefile~scalar_property.f90->sourcefile~constants.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~properties.f90~~AfferentGraph sourcefile~properties.f90 properties.f90 sourcefile~forsus.f90 forsus.f90 sourcefile~forsus.f90->sourcefile~properties.f90 sourcefile~substance.f90 substance.f90 sourcefile~forsus.f90->sourcefile~substance.f90 sourcefile~substance.f90->sourcefile~properties.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus_properties !! Possible properties defined in the package. use forsus_properties_scalar , only : ScalarProperty use forsus_properties_critical_constants , only : CriticalConstants end module","tags":"","loc":"sourcefile/properties.f90.html"}]}