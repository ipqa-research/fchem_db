var tipuesearch = {"pages":[{"title":" forsus ","text":"forsus forsus forsus Pure chemical compounds database and general API. Developer Info jscilipoti PhD in Chemical Engineering","tags":"home","loc":"index.html"},{"title":"Property – forsus ","text":"type, public :: Property Property base type Inherited by type~~property~~InheritedByGraph type~property Property type~scalarproperty ScalarProperty type~scalarproperty->type~property type~criticalconstants CriticalConstants type~criticalconstants->type~scalarproperty critical_pressure, critical_temperature, critical_volume, acentric_factor type~substance Substance type~substance->type~criticalconstants critical Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units Type-Bound Procedures procedure( abs_from_json ), public, deferred :: from_json subroutine abs_from_json(self, name, json_str, path) Prototype Arguments Type Intent Optional Attributes Name class( Property ) :: self character(len=*), intent(in) :: name character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"type/property.html"},{"title":"ScalarProperty – forsus ","text":"type, public, extends( Property ) :: ScalarProperty Scalar property. Inherits type~~scalarproperty~~InheritsGraph type~scalarproperty ScalarProperty type~property Property type~scalarproperty->type~property Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~scalarproperty~~InheritedByGraph type~scalarproperty ScalarProperty type~criticalconstants CriticalConstants type~criticalconstants->type~scalarproperty critical_pressure, critical_temperature, critical_volume, acentric_factor type~substance Substance type~substance->type~criticalconstants critical Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units real(kind=pr), public :: value Property value Type-Bound Procedures procedure, public :: from_json => scalar_from_json public  subroutine scalar_from_json (self, name, json_str, path) Setup a scalar property from a provided json key and json file path. Arguments Type Intent Optional Attributes Name class( ScalarProperty ) :: self character(len=*), intent(in) :: name Property name. Should be the key in the json file. character(len=*), intent(in) :: json_str json file relative path to executable. character(len=*), intent(in), optional :: path json file relative path to executable.","tags":"","loc":"type/scalarproperty.html"},{"title":"Substance – forsus ","text":"type, public :: Substance Substance object. A Substance object holds all the defined properties available in the\npackage. It can be initialized either by hand or from a json file.\nTo initialize from a json file the user must provide a database\npath by setting up the variable forsus_dir . Then defining a \nSubstance by it’s name (which should be the same as the filename)\nwill find all the properties and set them up properly. use forsus , only : Substance , forsus_dir type ( Substance ) :: sus forsus_dir = \"some/directory/path\" sus = Substance ( \"1-butanol\" ) print * , sus % critical % critical_temperature % value Inherits type~~substance~~InheritsGraph type~substance Substance type~criticalconstants CriticalConstants type~substance->type~criticalconstants critical type~scalarproperty ScalarProperty type~criticalconstants->type~scalarproperty critical_pressure, critical_temperature, critical_volume, acentric_factor type~property Property type~scalarproperty->type~property Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial type( CriticalConstants ), public :: critical Critical constants character(len=:), public, allocatable :: database_path Path to custom database character(len=:), public, allocatable :: name Substance name Constructor public        interface Substance public  function init_json (name, path) Initialize a Substance object from a json file, provided it’s name. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name character(len=*), intent(in), optional :: path Return Value type( Substance )","tags":"","loc":"type/substance.html"},{"title":"CriticalConstants – forsus ","text":"type, public :: CriticalConstants Inherits type~~criticalconstants~~InheritsGraph type~criticalconstants CriticalConstants type~scalarproperty ScalarProperty type~criticalconstants->type~scalarproperty critical_pressure, critical_temperature, critical_volume, acentric_factor type~property Property type~scalarproperty->type~property Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~criticalconstants~~InheritedByGraph type~criticalconstants CriticalConstants type~substance Substance type~substance->type~criticalconstants critical Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial type( ScalarProperty ), public :: acentric_factor type( ScalarProperty ), public :: critical_pressure type( ScalarProperty ), public :: critical_temperature type( ScalarProperty ), public :: critical_volume Type-Bound Procedures procedure, public :: from_json public impure elemental subroutine from_json (self, json_str, path) Arguments Type Intent Optional Attributes Name class( CriticalConstants ), intent(inout) :: self character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"type/criticalconstants.html"},{"title":"abs_from_json – forsus","text":"interface public  subroutine abs_from_json(self, name, json_str, path) Arguments Type Intent Optional Attributes Name class( Property ) :: self character(len=*), intent(in) :: name character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"interface/abs_from_json.html"},{"title":"scalar_from_json – forsus","text":"public  subroutine scalar_from_json(self, name, json_str, path) Uses iso_fortran_env proc~~scalar_from_json~~UsesGraph proc~scalar_from_json forsus_property::ScalarProperty%scalar_from_json iso_fortran_env iso_fortran_env proc~scalar_from_json->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Setup a scalar property from a provided json key and json file path. Type Bound ScalarProperty Arguments Type Intent Optional Attributes Name class( ScalarProperty ) :: self character(len=*), intent(in) :: name Property name. Should be the key in the json file. character(len=*), intent(in) :: json_str json file relative path to executable. character(len=*), intent(in), optional :: path json file relative path to executable. Calls proc~~scalar_from_json~~CallsGraph proc~scalar_from_json forsus_property::ScalarProperty%scalar_from_json failed failed proc~scalar_from_json->failed get get proc~scalar_from_json->get initialize initialize proc~scalar_from_json->initialize load_file load_file proc~scalar_from_json->load_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~scalar_from_json~~CalledByGraph proc~scalar_from_json forsus_property::ScalarProperty%scalar_from_json proc~from_json forsus_critical_constants::CriticalConstants%from_json proc~from_json->proc~scalar_from_json proc~init_json forsus::init_json proc~init_json->proc~from_json interface~substance forsus::Substance interface~substance->proc~init_json Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Visibility Attributes Name Initial type(json_file), public :: json","tags":"","loc":"proc/scalar_from_json.html"},{"title":"init_json – forsus","text":"public  function init_json(name, path) Initialize a Substance object from a json file, provided it’s name. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name character(len=*), intent(in), optional :: path Return Value type( Substance ) Calls proc~~init_json~~CallsGraph proc~init_json forsus::init_json proc~from_json forsus_critical_constants::CriticalConstants%from_json proc~init_json->proc~from_json proc~scalar_from_json forsus_property::ScalarProperty%scalar_from_json proc~from_json->proc~scalar_from_json failed failed proc~scalar_from_json->failed get get proc~scalar_from_json->get initialize initialize proc~scalar_from_json->initialize load_file load_file proc~scalar_from_json->load_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~init_json~~CalledByGraph proc~init_json forsus::init_json interface~substance forsus::Substance interface~substance->proc~init_json Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/init_json.html"},{"title":"Substance – forsus","text":"public interface Substance Calls interface~~substance~~CallsGraph interface~substance forsus::Substance proc~init_json forsus::init_json interface~substance->proc~init_json proc~from_json forsus_critical_constants::CriticalConstants%from_json proc~init_json->proc~from_json proc~scalar_from_json forsus_property::ScalarProperty%scalar_from_json proc~from_json->proc~scalar_from_json failed failed proc~scalar_from_json->failed get get proc~scalar_from_json->get initialize initialize proc~scalar_from_json->initialize load_file load_file proc~scalar_from_json->load_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Module Procedures public  function init_json (name, path) Initialize a Substance object from a json file, provided it’s name. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name character(len=*), intent(in), optional :: path Return Value type( Substance )","tags":"","loc":"interface/substance.html"},{"title":"from_json – forsus","text":"public impure elemental subroutine from_json(self, json_str, path) Type Bound CriticalConstants Arguments Type Intent Optional Attributes Name class( CriticalConstants ), intent(inout) :: self character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path Calls proc~~from_json~~CallsGraph proc~from_json forsus_critical_constants::CriticalConstants%from_json proc~scalar_from_json forsus_property::ScalarProperty%scalar_from_json proc~from_json->proc~scalar_from_json failed failed proc~scalar_from_json->failed get get proc~scalar_from_json->get initialize initialize proc~scalar_from_json->initialize load_file load_file proc~scalar_from_json->load_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~from_json~~CalledByGraph proc~from_json forsus_critical_constants::CriticalConstants%from_json proc~init_json forsus::init_json proc~init_json->proc~from_json interface~substance forsus::Substance interface~substance->proc~init_json Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/from_json.html"},{"title":"forsus_constants – forsus","text":"Uses iso_fortran_env module~~forsus_constants~~UsesGraph module~forsus_constants forsus_constants iso_fortran_env iso_fortran_env module~forsus_constants->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~forsus_constants~~UsedByGraph module~forsus_constants forsus_constants module~forsus_property forsus_property module~forsus_property->module~forsus_constants module~forsus_critical_constants forsus_critical_constants module~forsus_critical_constants->module~forsus_property module~forsus forsus module~forsus->module~forsus_critical_constants Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: forsus_default_dir = \"files/db_json\" character(len=:), public, allocatable :: forsus_dir integer, public, parameter :: pr = real64","tags":"","loc":"module/forsus_constants.html"},{"title":"forsus_property – forsus","text":"Uses json_module forsus_constants module~~forsus_property~~UsesGraph module~forsus_property forsus_property json_module json_module module~forsus_property->json_module module~forsus_constants forsus_constants module~forsus_property->module~forsus_constants iso_fortran_env iso_fortran_env module~forsus_constants->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~forsus_property~~UsedByGraph module~forsus_property forsus_property module~forsus_critical_constants forsus_critical_constants module~forsus_critical_constants->module~forsus_property module~forsus forsus module~forsus->module~forsus_critical_constants Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Abstract Interfaces abstract interface public  subroutine abs_from_json(self, name, json_str, path) Arguments Type Intent Optional Attributes Name class( Property ) :: self character(len=*), intent(in) :: name character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path Derived Types type, public :: Property Property base type Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units Type-Bound Procedures procedure( abs_from_json ), public, deferred :: from_json type, public, extends( Property ) :: ScalarProperty Scalar property. Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units real(kind=pr), public :: value Property value Type-Bound Procedures procedure, public :: from_json => scalar_from_json Subroutines public  subroutine scalar_from_json (self, name, json_str, path) Setup a scalar property from a provided json key and json file path. Arguments Type Intent Optional Attributes Name class( ScalarProperty ) :: self character(len=*), intent(in) :: name Property name. Should be the key in the json file. character(len=*), intent(in) :: json_str json file relative path to executable. character(len=*), intent(in), optional :: path json file relative path to executable.","tags":"","loc":"module/forsus_property.html"},{"title":"forsus – forsus","text":"Uses forsus_critical_constants module~~forsus~~UsesGraph module~forsus forsus module~forsus_critical_constants forsus_critical_constants module~forsus->module~forsus_critical_constants module~forsus_property forsus_property module~forsus_critical_constants->module~forsus_property json_module json_module module~forsus_property->json_module module~forsus_constants forsus_constants module~forsus_property->module~forsus_constants iso_fortran_env iso_fortran_env module~forsus_constants->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Interfaces public        interface Substance public  function init_json (name, path) Initialize a Substance object from a json file, provided it’s name. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name character(len=*), intent(in), optional :: path Return Value type( Substance ) Derived Types type, public :: Substance Substance object. Read more… Components Type Visibility Attributes Name Initial type( CriticalConstants ), public :: critical Critical constants character(len=:), public, allocatable :: database_path Path to custom database character(len=:), public, allocatable :: name Substance name Constructor public\n\n                    \n                    function init_json (name, path) Initialize a Substance object from a json file, provided it’s name. Functions public  function init_json (name, path) Initialize a Substance object from a json file, provided it’s name. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name character(len=*), intent(in), optional :: path Return Value type( Substance )","tags":"","loc":"module/forsus.html"},{"title":"forsus_critical_constants – forsus","text":"Uses forsus_property module~~forsus_critical_constants~~UsesGraph module~forsus_critical_constants forsus_critical_constants module~forsus_property forsus_property module~forsus_critical_constants->module~forsus_property json_module json_module module~forsus_property->json_module module~forsus_constants forsus_constants module~forsus_property->module~forsus_constants iso_fortran_env iso_fortran_env module~forsus_constants->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~forsus_critical_constants~~UsedByGraph module~forsus_critical_constants forsus_critical_constants module~forsus forsus module~forsus->module~forsus_critical_constants Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Derived Types type, public :: CriticalConstants Components Type Visibility Attributes Name Initial type( ScalarProperty ), public :: acentric_factor type( ScalarProperty ), public :: critical_pressure type( ScalarProperty ), public :: critical_temperature type( ScalarProperty ), public :: critical_volume Type-Bound Procedures procedure, public :: from_json Subroutines public impure elemental subroutine from_json (self, json_str, path) Arguments Type Intent Optional Attributes Name class( CriticalConstants ), intent(inout) :: self character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"module/forsus_critical_constants.html"},{"title":"constants.f90 – forsus","text":"Files dependent on this one sourcefile~~constants.f90~~AfferentGraph sourcefile~constants.f90 constants.f90 sourcefile~properties.f90 properties.f90 sourcefile~properties.f90->sourcefile~constants.f90 sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~critical_constants.f90->sourcefile~properties.f90 sourcefile~core.f90 core.f90 sourcefile~core.f90->sourcefile~critical_constants.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus_constants use iso_fortran_env , only : real64 implicit none integer , parameter :: pr = real64 character ( len = :), allocatable :: forsus_dir character ( len =* ), parameter :: forsus_default_dir = \"files/db_json\" end module","tags":"","loc":"sourcefile/constants.f90.html"},{"title":"properties.f90 – forsus","text":"This file depends on sourcefile~~properties.f90~~EfferentGraph sourcefile~properties.f90 properties.f90 sourcefile~constants.f90 constants.f90 sourcefile~properties.f90->sourcefile~constants.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~properties.f90~~AfferentGraph sourcefile~properties.f90 properties.f90 sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~critical_constants.f90->sourcefile~properties.f90 sourcefile~core.f90 core.f90 sourcefile~core.f90->sourcefile~critical_constants.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus_property use forsus_constants , only : pr , forsus_dir , forsus_default_dir use json_module , only : json_file implicit none type , abstract :: Property !! Property base type character ( len = :), allocatable :: name !! Property's name character ( len = :), allocatable :: units !! Units contains procedure ( abs_from_json ), deferred :: from_json end type abstract interface subroutine abs_from_json ( self , name , json_str , path ) import Property class ( Property ) :: self character ( len =* ), intent ( in ) :: name character ( len =* ), intent ( in ) :: json_str character ( len =* ), optional , intent ( in ) :: path end subroutine end interface type , extends ( Property ) :: ScalarProperty !! Scalar property. real ( pr ) :: value !! Property value contains procedure :: from_json => scalar_from_json end type contains subroutine scalar_from_json ( self , name , json_str , path ) !! Setup a scalar property from a provided json key and json file path. use iso_fortran_env , only : error_unit class ( ScalarProperty ) :: self character ( len =* ), intent ( in ) :: name !! Property name. Should be the key in the `json` file. character ( len =* ), intent ( in ) :: json_str !! `json` file relative path to executable. character ( len =* ), optional , intent ( in ) :: path !! `json` file relative path to executable. type ( json_file ) :: json self % name = name call json % initialize () if ( present ( path )) then call json % load_file ( path // \"/\" // json_str ) else if ( allocated ( forsus_dir )) then call json % load_file ( forsus_dir // \"/\" // json_str ) else call json % load_file ( forsus_default_dir // \"/\" // json_str ) end if end if if ( json % failed ()) then write ( error_unit , * ) \"ERROR: Invalid .json file: \" , json_str call exit ( 1 ) end if call json % get ( self % name // \".value(1)\" , self % value ) end subroutine end module","tags":"","loc":"sourcefile/properties.f90.html"},{"title":"core.f90 – forsus","text":"This file depends on sourcefile~~core.f90~~EfferentGraph sourcefile~core.f90 core.f90 sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~core.f90->sourcefile~critical_constants.f90 sourcefile~properties.f90 properties.f90 sourcefile~critical_constants.f90->sourcefile~properties.f90 sourcefile~constants.f90 constants.f90 sourcefile~properties.f90->sourcefile~constants.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus use forsus_critical_constants , only : CriticalConstants implicit none type :: Substance !! Substance object. !! !! A Substance object holds all the defined properties available in the !! package. It can be initialized either by hand or from a json file. !! To initialize from a `json` file the user must provide a database !! path by setting up the variable `forsus_dir`. Then defining a !! Substance by it's name (which should be the same as the filename) !! will find all the properties and set them up properly. !! !! ```fortran !! use forsus, only: Substance, forsus_dir !! type(Substance) :: sus !! !! forsus_dir = \"some/directory/path\" !! sus = Substance(\"1-butanol\") !! !! print *, sus%critical%critical_temperature%value !! ``` character ( len = :), allocatable :: name !! Substance name character ( len = :), allocatable :: database_path !! Path to custom database type ( CriticalConstants ) :: critical !! Critical constants end type ! Setting this interface allows to use `init_json` as the object init interface Substance module procedure :: init_json end interface contains type ( Substance ) function init_json ( name , path ) !! Initialize a Substance object from a json file, provided it's name. character ( len =* ), intent ( in ) :: name character ( len =* ), optional , intent ( in ) :: path init_json % name = trim ( name ) call init_json % critical % from_json ( init_json % name // \".json\" , path ) end function end module","tags":"","loc":"sourcefile/core.f90.html"},{"title":"critical_constants.f90 – forsus","text":"This file depends on sourcefile~~critical_constants.f90~~EfferentGraph sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~properties.f90 properties.f90 sourcefile~critical_constants.f90->sourcefile~properties.f90 sourcefile~constants.f90 constants.f90 sourcefile~properties.f90->sourcefile~constants.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Files dependent on this one sourcefile~~critical_constants.f90~~AfferentGraph sourcefile~critical_constants.f90 critical_constants.f90 sourcefile~core.f90 core.f90 sourcefile~core.f90->sourcefile~critical_constants.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module forsus_critical_constants use forsus_property implicit none type :: CriticalConstants type ( ScalarProperty ) :: critical_pressure type ( ScalarProperty ) :: critical_temperature type ( ScalarProperty ) :: critical_volume type ( ScalarProperty ) :: acentric_factor contains procedure :: from_json end type contains impure elemental subroutine from_json ( self , json_str , path ) class ( CriticalConstants ), intent ( in out ) :: self character ( len =* ), intent ( in ) :: json_str character ( len =* ), optional , intent ( in ) :: path call self % critical_pressure % from_json ( \"CriticalPressure\" , json_str , path ) call self % critical_temperature % from_json ( \"CriticalTemperature\" , json_str , path ) call self % critical_volume % from_json ( \"CriticalVolume\" , json_str , path ) call self % acentric_factor % from_json ( \"AcentricityFactor\" , json_str , path ) end subroutine end module","tags":"","loc":"sourcefile/critical_constants.f90.html"}]}