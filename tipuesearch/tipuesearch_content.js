var tipuesearch = {"pages":[{"title":" forsus ","text":"forsus forsus forsus Pure chemical compounds database and general API. Developer Info jscilipoti PhD in Chemical Engineering","tags":"home","loc":"index.html"},{"title":"Substance – forsus ","text":"type, public :: Substance Substance object. A Substance object holds all the defined properties available in the\npackage. It can be initialized either by hand or from a json file.\nTo initialize from a json file the user must provide a database\npath by setting up the variable fchem_db_dir . Then defining a \nSubstance by it’s name (which should be the same as the filename)\nwill find all the properties and set them up properly. use fchem_db , only : Substance , fchem_db_dir type ( Substance ) :: sus fchem_db_dir = \"some/directory/path\" sus = Substance ( \"1-butanol\" ) print * , sus % critical % critical_temperature % value Components Type Visibility Attributes Name Initial type( CriticalConstants ), public :: critical Critical constants character(len=:), public, allocatable :: database_path Path to custom database character(len=:), public, allocatable :: name Substance name Constructor public        interface Substance public  function init_json (name, path) Initialize a Substance object from a json file, provided it’s name. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name character(len=*), intent(in), optional :: path Return Value type( Substance )","tags":"","loc":"type/substance.html"},{"title":"CriticalConstants – forsus ","text":"type, public :: CriticalConstants Components Type Visibility Attributes Name Initial type( ScalarProperty ), public :: acentric_factor type( ScalarProperty ), public :: critical_pressure type( ScalarProperty ), public :: critical_temperature type( ScalarProperty ), public :: critical_volume Type-Bound Procedures procedure, public :: from_json public impure elemental subroutine from_json (self, json_str, path) Arguments Type Intent Optional Attributes Name class( CriticalConstants ), intent(inout) :: self character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"type/criticalconstants.html"},{"title":"Property – forsus ","text":"type, public :: Property Property base type Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units Type-Bound Procedures procedure( abs_from_json ), public, deferred :: from_json subroutine abs_from_json(self, name, json_str, path) Prototype Arguments Type Intent Optional Attributes Name class( Property ) :: self character(len=*), intent(in) :: name character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"type/property.html"},{"title":"ScalarProperty – forsus ","text":"type, public, extends( Property ) :: ScalarProperty Scalar property. Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units real(kind=pr), public :: value Property value Type-Bound Procedures procedure, public :: from_json => scalar_from_json public  subroutine scalar_from_json (self, name, json_str, path) Setup a scalar property from a provided json key and json file path. Arguments Type Intent Optional Attributes Name class( ScalarProperty ) :: self character(len=*), intent(in) :: name Property name. Should be the key in the json file. character(len=*), intent(in) :: json_str json file relative path to executable. character(len=*), intent(in), optional :: path json file relative path to executable.","tags":"","loc":"type/scalarproperty.html"},{"title":"abs_from_json – forsus","text":"interface public  subroutine abs_from_json(self, name, json_str, path) Arguments Type Intent Optional Attributes Name class( Property ) :: self character(len=*), intent(in) :: name character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"interface/abs_from_json.html"},{"title":"init_json – forsus","text":"public  function init_json(name, path) Initialize a Substance object from a json file, provided it’s name. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name character(len=*), intent(in), optional :: path Return Value type( Substance )","tags":"","loc":"proc/init_json.html"},{"title":"Substance – forsus","text":"public interface Substance Module Procedures public  function init_json (name, path) Initialize a Substance object from a json file, provided it’s name. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name character(len=*), intent(in), optional :: path Return Value type( Substance )","tags":"","loc":"interface/substance.html"},{"title":"from_json – forsus","text":"public impure elemental subroutine from_json(self, json_str, path) Type Bound CriticalConstants Arguments Type Intent Optional Attributes Name class( CriticalConstants ), intent(inout) :: self character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"proc/from_json.html"},{"title":"scalar_from_json – forsus","text":"public  subroutine scalar_from_json(self, name, json_str, path) Uses iso_fortran_env Setup a scalar property from a provided json key and json file path. Type Bound ScalarProperty Arguments Type Intent Optional Attributes Name class( ScalarProperty ) :: self character(len=*), intent(in) :: name Property name. Should be the key in the json file. character(len=*), intent(in) :: json_str json file relative path to executable. character(len=*), intent(in), optional :: path json file relative path to executable. Variables Type Visibility Attributes Name Initial type(json_file), public :: json","tags":"","loc":"proc/scalar_from_json.html"},{"title":"fchem_db_constants – forsus","text":"Uses iso_fortran_env Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: fchem_db_default_dir = \"files/db_json\" character(len=:), public, allocatable :: fchem_db_dir integer, public, parameter :: pr = real64","tags":"","loc":"module/fchem_db_constants.html"},{"title":"fchem_db – forsus","text":"Uses fbchem_db_critical_constants Interfaces public        interface Substance public  function init_json (name, path) Initialize a Substance object from a json file, provided it’s name. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name character(len=*), intent(in), optional :: path Return Value type( Substance ) Derived Types type, public :: Substance Substance object. Read more… Components Type Visibility Attributes Name Initial type( CriticalConstants ), public :: critical Critical constants character(len=:), public, allocatable :: database_path Path to custom database character(len=:), public, allocatable :: name Substance name Constructor public\n\n                    \n                    function init_json (name, path) Initialize a Substance object from a json file, provided it’s name. Functions public  function init_json (name, path) Initialize a Substance object from a json file, provided it’s name. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name character(len=*), intent(in), optional :: path Return Value type( Substance )","tags":"","loc":"module/fchem_db.html"},{"title":"fbchem_db_critical_constants – forsus","text":"Uses fchem_db_property Derived Types type, public :: CriticalConstants Components Type Visibility Attributes Name Initial type( ScalarProperty ), public :: acentric_factor type( ScalarProperty ), public :: critical_pressure type( ScalarProperty ), public :: critical_temperature type( ScalarProperty ), public :: critical_volume Type-Bound Procedures procedure, public :: from_json Subroutines public impure elemental subroutine from_json (self, json_str, path) Arguments Type Intent Optional Attributes Name class( CriticalConstants ), intent(inout) :: self character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path","tags":"","loc":"module/fbchem_db_critical_constants.html"},{"title":"fchem_db_property – forsus","text":"Uses fchem_db_constants json_module Abstract Interfaces abstract interface public  subroutine abs_from_json(self, name, json_str, path) Arguments Type Intent Optional Attributes Name class( Property ) :: self character(len=*), intent(in) :: name character(len=*), intent(in) :: json_str character(len=*), intent(in), optional :: path Derived Types type, public :: Property Property base type Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units Type-Bound Procedures procedure( abs_from_json ), public, deferred :: from_json type, public, extends( Property ) :: ScalarProperty Scalar property. Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: name Property’s name character(len=:), public, allocatable :: units Units real(kind=pr), public :: value Property value Type-Bound Procedures procedure, public :: from_json => scalar_from_json Subroutines public  subroutine scalar_from_json (self, name, json_str, path) Setup a scalar property from a provided json key and json file path. Arguments Type Intent Optional Attributes Name class( ScalarProperty ) :: self character(len=*), intent(in) :: name Property name. Should be the key in the json file. character(len=*), intent(in) :: json_str json file relative path to executable. character(len=*), intent(in), optional :: path json file relative path to executable.","tags":"","loc":"module/fchem_db_property.html"},{"title":"constants.f90 – forsus","text":"Source Code module fchem_db_constants use iso_fortran_env , only : real64 implicit none integer , parameter :: pr = real64 character ( len = :), allocatable :: fchem_db_dir character ( len =* ), parameter :: fchem_db_default_dir = \"files/db_json\" end module","tags":"","loc":"sourcefile/constants.f90.html"},{"title":"core.f90 – forsus","text":"Source Code module fchem_db use fbchem_db_critical_constants , only : CriticalConstants implicit none type :: Substance !! Substance object. !! !! A Substance object holds all the defined properties available in the !! package. It can be initialized either by hand or from a json file. !! To initialize from a `json` file the user must provide a database !! path by setting up the variable `fchem_db_dir`. Then defining a !! Substance by it's name (which should be the same as the filename) !! will find all the properties and set them up properly. !! !! ```fortran !! use fchem_db, only: Substance, fchem_db_dir !! type(Substance) :: sus !! !! fchem_db_dir = \"some/directory/path\" !! sus = Substance(\"1-butanol\") !! !! print *, sus%critical%critical_temperature%value !! ``` character ( len = :), allocatable :: name !! Substance name character ( len = :), allocatable :: database_path !! Path to custom database type ( CriticalConstants ) :: critical !! Critical constants end type interface Substance module procedure :: init_json end interface contains type ( Substance ) function init_json ( name , path ) !! Initialize a Substance object from a json file, provided it's name. character ( len =* ), intent ( in ) :: name character ( len =* ), optional , intent ( in ) :: path init_json % name = trim ( name ) call init_json % critical % from_json ( init_json % name // \".json\" , path ) end function end module","tags":"","loc":"sourcefile/core.f90.html"},{"title":"critical_constants.f90 – forsus","text":"Source Code module fbchem_db_critical_constants use fchem_db_property implicit none type :: CriticalConstants type ( ScalarProperty ) :: critical_pressure type ( ScalarProperty ) :: critical_temperature type ( ScalarProperty ) :: critical_volume type ( ScalarProperty ) :: acentric_factor contains procedure :: from_json end type contains impure elemental subroutine from_json ( self , json_str , path ) class ( CriticalConstants ), intent ( in out ) :: self character ( len =* ), intent ( in ) :: json_str character ( len =* ), optional , intent ( in ) :: path call self % critical_pressure % from_json ( \"CriticalPressure\" , json_str , path ) call self % critical_temperature % from_json ( \"CriticalTemperature\" , json_str , path ) call self % critical_volume % from_json ( \"CriticalVolume\" , json_str , path ) call self % acentric_factor % from_json ( \"AcentricityFactor\" , json_str , path ) end subroutine end module","tags":"","loc":"sourcefile/critical_constants.f90.html"},{"title":"properties.f90 – forsus","text":"Source Code module fchem_db_property use fchem_db_constants , only : pr , fchem_db_dir , fchem_db_default_dir use json_module , only : json_file implicit none type , abstract :: Property !! Property base type character ( len = :), allocatable :: name !! Property's name character ( len = :), allocatable :: units !! Units contains procedure ( abs_from_json ), deferred :: from_json end type abstract interface subroutine abs_from_json ( self , name , json_str , path ) import Property class ( Property ) :: self character ( len =* ), intent ( in ) :: name character ( len =* ), intent ( in ) :: json_str character ( len =* ), optional , intent ( in ) :: path end subroutine end interface type , extends ( Property ) :: ScalarProperty !! Scalar property. real ( pr ) :: value !! Property value contains procedure :: from_json => scalar_from_json end type contains subroutine scalar_from_json ( self , name , json_str , path ) !! Setup a scalar property from a provided json key and json file path. use iso_fortran_env , only : error_unit class ( ScalarProperty ) :: self character ( len =* ), intent ( in ) :: name !! Property name. Should be the key in the `json` file. character ( len =* ), intent ( in ) :: json_str !! `json` file relative path to executable. character ( len =* ), optional , intent ( in ) :: path !! `json` file relative path to executable. type ( json_file ) :: json self % name = name call json % initialize () if ( present ( path )) then call json % load_file ( path // \"/\" // json_str ) else if ( allocated ( fchem_db_dir )) then call json % load_file ( fchem_db_dir // \"/\" // json_str ) else call json % load_file ( fchem_db_default_dir // \"/\" // json_str ) end if end if if ( json % failed ()) then write ( error_unit , * ) \"ERROR: Invalid .json file: \" , json_str call exit ( 1 ) end if call json % get ( self % name // \".value(1)\" , self % value ) end subroutine end module","tags":"","loc":"sourcefile/properties.f90.html"}]}